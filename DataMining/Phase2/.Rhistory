distance(k,method="euclidean")
distance(k,method="cosine")
distance(k,method="jaccard")
cor(x,y)
x = c(1, 1, 1, 1)
y = c(2, 2, 2, 2)
k=rbind(x,y)
distance(k,method="euclidean")
distance(k,method="cosine")
distance(k,method="jaccard")
cor(x,y)
x = c(1, 1, 0, 1, 0, 1)
y = c(1, 1, 1, 0, 0, 1)
k=rbind(x,y)
distance(k,method="euclidean")
distance(k,method="cosine")
distance(k,method="jaccard")
cor(x,y)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
dim(Airb)
class(Airb)
range(Airb$price)
sum(Airb$price)/length(Airb$price)
price=Airb$price[!Airb$price>1000&&!Airb$price==0]
hist(price)
price=Airb$price[!Airb$price>1000||!Airb$price==0]
hist(price)
length(price)
price=Airb$price[!Airb$price>1000&&!Airb$price==0]
hist(price)
length(price)
range(Airb$room_type)
i
range(Airb$price)
price=Airb$price[!Airb$price>1000&!Airb$price==0]
range(Airb$price)
price=Airb$price[!Airb$price>1000 !Airb$price==0]
price=Airb$price[!Airb$price>1000]
price=price[!Airb$price==0]
hist(price)
length(price)
range(Airb$room_type)
range(Airb$price)
range(price)
length(price)
range(price)
View(Airb)
Airb=data.frame(Airb,price_)
price_=Airb$price>150
Airb=data.frame(Airb,price_)
TRain=sqldf("select longitude,latitude,price,minimum_nights,
availability_365,price_ from Airb where price!=0 and
price<1000 and id%10!=0")
library(sqldf)
attach(Airb)
library(sqldf)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
mean(Airb$price)
price_x=Airb$price>150
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10!=0")
TEst=sqldf("select longitude,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10==0")
remove price_
remove (price_)
View(TRain)
# grow tree
fit = rpart(price_x~longitude+latitude+price+minimum_nights+
availability_365,method="class", data=TRain)
library(rpart)
# grow tree
fit = rpart(price_x~longitude+latitude+price+minimum_nights+
availability_365,method="class", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Train")
printcp(fit) # display the results
# grow tree
fit = rpart(price~longitude+latitude+price+minimum_nights+
availability_365,method="anova", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
# grow tree
fit = rpart(price~longitude+latitude+price+minimum_nights+
availability_365,method="anova", data=Airb)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# grow tree
fit = rpart(price~longitude+latitude+price+minimum_nights+
availability_365,method="anova", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Train")
rpart.plot(fit)
plot(fit)
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Train")
# plot tree
plot(fit, uniform=TRUE,branch=1,type=2,
main="Classification Tree for Train")
printcp(fit) # display the results
# grow tree
fit = rpart(price~longitude+latitude+minimum_nights+
availability_365,method="anova", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit)
# plot tree
plot(fit, uniform=TRUE,branch=1,type=2,
main="Classification Tree for Train")
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(rpart)
mean(Airb$price)
price_x=Airb$price>150
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10!=0")
TEst=sqldf("select longitude,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10==0")
# grow tree
fit = rpart(price~longitude+latitude+minimum_nights+
availability_365,method="anova", data=TRain)
predtree<-predict(fit,newdata=TEst,type="class")
predtree<-predict(fit,newdata=TEst,type="anova")
predtree<-predict(tree,newdata=TEst,type="anova")
plot(fit,fallen.leaves=T,cex=0.8) # plot tree
rpart.plot(fit,fallen.leaves=T,cex=0.8) # plot tree
predtree<-predict(fit,newdata=TEst,type="anova")
predtree=predict(fit,newdata=TEst,type="anova")
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="anova", data=TRain)
printcp(fit) # display the results
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
rpart.plot(fit,fallen.leaves=T,cex=0.8) # plot tree
predtree=predict(fit,newdata=TEst,type="anova")
plot(fit,fallen.leaves=T,cex=0.8) # plot tree
plot(fit,cex=0.8) # plot tree
plot(fit) # plot tree
rpart::plotcp(fit)
text(rpart.mod.pru,all = TRUE,digits = 7,use.n = TRUE,cex=0.9,xpd=TRUE)
packageVersion(party)
packageVersion(rpart?)
packageVersion(rpart?)
packageVersion(rpart)
install.packages("party")
draw.tree(fit)
install.packages("party")
install.packages("party")
packages(party)
library(party)
install.packages("mvtnorm")
View(Airb)
TRain=sqldf("select longitude,neibourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10!=0")
neighbourhood_group
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10==0")
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit) # plot tree
text(rpart.mod.pru,all = TRUE,digits = 7,use.n = TRUE,cex=0.9,xpd=TRUE)
draw.tree(fit)
predtree=predict(fit,newdata=TEst,type="anova")
predtree=predict(fit,newdata=TEst)
View(predtree)
View(TEst)
table(vdata$class,predtree,dnn=c("真实值","预测值"))
table(TEst$class,predtree,dnn=c("真实值","预测值"))
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$class,predtree,dnn=c("真实值","预测值"))
View(fit)
table(TEst$class,predtree)
table(TEst$price_x,predtree)
mean(Airb$price)
mean(TEst$price)
price_x=Airb$price>150
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5==0")
mean(TEst$price)
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
printcp(fit) # display the results
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$price_x,predtree)
price_x=Airb$price>100
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5==0")
mean(TEst$price)
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$price_x,predtree)
price_x=Airb$price>50
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5==0")
mean(TEst$price)
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$price_x,predtree)
price_x=Airb$price>100
Airb=data.frame(Airb,price_x)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(rpart)
mean(Airb$price)
price_x=Airb$price>100
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5==0")
mean(TEst$price)
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit) # plot tree
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$price_x,predtree)
library(party)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(class)
price_x=Airb$price>100
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,latitude,minimum_nights,
availability_365,price from Airb where price!=0 and
price<1000 and id%10!=1")
TEst=sqldf("select longitude,latitude,minimum_nights,
availability_365,price from Airb where price!=0 and
price<1000 and id%10==1")
fig=knn(TRain,TEst,price,k=5)
fig=knn(TRain,TEst,cl=price,k=5)
fig=knn(train=TRain,test=TEst,cl=price,k=5)
TRain=as.data.frame(TRain)
TEst=as.data.frame(TEst)
View(TEst)
View(TRain)
View(TEst)
TRain=sqldf("select longitude,latitude,minimum_nights,
availability_365,price from Airb where price!=0 and
price<1000 and id%10!=1")
TEst=sqldf("select longitude,latitude,minimum_nights,
availability_365,price from Airb where price!=0 and
price<1000 and id%10==1")
TRain_z=as.data.frame(TRain)
TEst_z=as.data.frame(TEst)
View(TEst_z)
View(TEst)
View(TEst_z)
View(TEst)
View(TEst_z)
View(TEst)
View(TEst_z)
View(TEst)
TRain_z=as.data.frame(scale(TRain))
TEst_z=as.data.frame(scale(TEst)
View(TEst_z)
View(TEst_z)
TEst_z=as.data.frame(scale(TEst))
View(TRain_z)
View(TEst_z)
formula=price~.
fig=knn(formula,train=TRain,test=TEst,cl=price,k=5)
fig=kknn(formula,train=TRain,test=TEst,cl=price,k=5)
View(Airb)
fig=knn(train=TRain[1,4],test=TEst[1,4],cl=price_x,k=5)
fig=knn(train=TRain[1,4],test=TEst[1,4],cl=price,k=5)
TRain_z=as.data.frame(scale(TRain[1,4]))
View(TRain_z)
TEst_z=as.data.frame(scale(TEst[1:4]))
View(TEst_z)
fig=knn(train=TRain[1:4],test=TEst[1:4],cl=price,k=5)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(class)
TRain=sqldf("select longitude,latitude,minimum_nights,
availability_365 from Airb where price!=0 and
price<1000 and id%10!=1")
TEst=sqldf("select longitude,latitude,minimum_nights,
availability_365 from Airb where price!=0 and
price<1000 and id%10==1")
Train_label=sqldf("select price from Airb where price!=0 and
price<1000 and id%10!=1")
TEst_label=sqldf("select price from Airb where price!=0 and
price<1000 and id%10==1")
TEst_z=as.data.frame(scale(TEst))
fig=knn(train=TRain,test=TEst,cl=Train_label,k=5)
View(TEst_z)
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label,k=5)
#normalization needed later
TRain_z=as.data.frame(scale(TRain))
TEst_z=as.data.frame(scale(TEst))
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label,k=5)
View(TEst_z)
View(TRain_z)
dim(TRain_z)
dim(TEst_z)
length(Train_label)
View(TEst_label)
class(Train_label)
length(Train_label)
dim(Train_label)
Train_label=c(sqldf("select price from Airb where price!=0 and
price<1000 and id%10!=1"))
View(Train_label)
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label,k=5)
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label$price,k=5)
View(Train_label)
TEst_label=sqldf("select price from Airb where price!=0 and
price<1000 and id%10==1")
tabel(pred,TEst_lable$price)
rpart.tabel(pred,TEst_lable$price)
table(TEst$price_x,predtree)
table(pred,TEst_lable$price)
table(pred,TEst_label$price)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(class)
TRain=sqldf("select longitude,latitude,minimum_nights,
availability_365 from Airb where price!=0 and
price<1000 and id%10!=1")
TEst=sqldf("select longitude,latitude,minimum_nights,
availability_365 from Airb where price!=0 and
price<1000 and id%10==1")
Train_label=(sqldf("select price from Airb where price!=0 and
price<1000 and id%10!=1"))
TEst_label=sqldf("select price from Airb where price!=0 and
price<1000 and id%10==1")
View(TEst_label)
View(Train_label)
View(Train_label)
#normalization needed later
TRain_z=as.data.frame(scale(TRain))
TEst_z=as.data.frame(scale(TEst))
dim(TRain_z)
dim(TEst_z)
dim(Train_label)
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label$price,k=5)
table(pred,TEst_label$price)
View(TRain)
View(TEst_label)
table(pred,TEst_label)
dim(pred)
table(TEst_label$price,pred)
library(gmodels)
cm = as.matrix(table(Actual = TEst_label$price, Predicted = pred))
sum(diag(cm))
pred=knn(train=TRain_z,test=TEst_z,cl=Train_label$price,k=10)
cm = as.matrix(table(Actual = TEst_label$price, Predicted = pred))
sum(diag(cm))
sum(diag(cm))/length(TEst_label$price)
table(Actual = TEst_label$price, Predicted = pred)
cm = as.matrix(table(Actual = TEst$price_x, Predicted = predtree))
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(rpart)
mean(Airb$price)
price_x=Airb$price>100
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5!=0")
TEst=sqldf("select longitude,neighbourhood_group,latitude,price,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%5==0")
mean(TEst$price)
# grow tree
fit = rpart(price_x~longitude+latitude+minimum_nights+
availability_365,method="class", data=TRain)
predtree=predict(fit,newdata=TEst,type="class")
table(TEst$price_x,predtree)
cm = as.matrix(table(Actual = TEst$price_x, Predicted = predtree))
accu=sum(diag(cm))/length(TEst_label$price)
accu=sum(diag(cm))/length(TEst$price_x)
accu
attach(Airb)
library(sqldf)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
attach(Airb)
library(sqldf)
library(e1071)
library(sqldf)
library(e1071)
price_x=Airb$price>150
Airb=data.frame(Airb,price_x)
TRain=sqldf("select longitude,latitude,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10!=1")
TEst=sqldf("select longitude,latitude,minimum_nights,
availability_365,price_x from Airb where price!=0 and
price<1000 and id%10==1")
fit=naiveBayes(price_x~.,data=TRain)
install.packages("e107")
install.packages("e1071")
i
fit=naiveBayes(price_x~.,data=TRain)
library(e1071)
fit=naiveBayes(price_x~.,data=TRain)
pred=predict(fit,TEst,type="class")
cm = as.matrix(table(Actual = TEst$price_x, Predicted = pred))
accu=sum(diag(cm))/length(TEst$price_x)
message(accu)
Airb=read.csv("~/Documents/R/AB_NYC_2019.csv",header=T,na.strings="?")
table(Actual = TEst$price_x, Predicted = pred)
library(sqldf)
library(e1071)
install.packages("rpart.plot")
source('~/Documents/github/CSCI-620/DataMining/Phase2/kNN.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/kNN.R')
price_x=Airb$price>250
source('~/Documents/github/CSCI-620/DataMining/Phase2/kNN.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
#price_x -> target classification value
price_x=Airb$price>300
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/kNN.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/kNN.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/DM_DecisionTree.R')
source('~/Documents/github/CSCI-620/DataMining/Phase2/NaiveB.R')
knn=c(0.87,0.65,0.72,0.83,0.90)
DT=c(0.87,0.72,0.74,0.84,0.90)
NB=c(0.84,0.68,0.72,0.84,0.89)
# Give the chart file a name.
png(file = "line_chart_2_lines.jpg")
# Plot the bar chart.
plot(knn,type = "o",col = "red",
main = "3 different algorithms")
lines(DT, type = "o", col = "blue")
lines(NB, type = "o", col = "yellow")
# Save the file.
dev.off()
setwd("~/Documents/github/CSCI-620/DataMining/Phase2")
# Give the chart file a name.
png(file = "line_diagram.jpg")
# Plot the bar chart.
plot(knn,type = "o",col = "red",
main = "3 different algorithms")
lines(DT, type = "o", col = "blue")
lines(NB, type = "o", col = "yellow")
# Save the file.
dev.off()
